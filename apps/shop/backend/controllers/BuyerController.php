<?php

namespace myerm\shop\backend\controllers;


use myerm\backend\common\controllers\ObjectController;
use myerm\backend\common\libs\NewID;
use myerm\backend\system\models\SysUser;
use myerm\backend\common\models\Session;
use myerm\shop\common\models\Buyer;
use myerm\shop\common\models\Order;

/**
 * 渠道商
 */
class BuyerController extends ObjectController
{

    public function editObjectFieldValidate($ID, $field, $value)
    {
        $ret = parent::editObjectFieldValidate($ID, $field, $value); // TODO: Change the autogenerated stub

        if ($ret['bSuccess'] && $field->sFieldAs == 'sName') {
            //编辑渠道商时名称唯一性判断
            $Buyer = Buyer::findOne(['sName' => $value]);

            if ($Buyer->lID && $Buyer->lID != $ID) {
                return ['bSuccess' => false, 'sFieldAs' => $field->sFieldAs, 'sMsg' => "该渠道商名称已存在。"];
            }

        } elseif ($ret['bSuccess'] && $field->sFieldAs == 'sUserName') {
            //编辑渠道商时登录名唯一性判断
            $Buyer = Buyer::findOne(['sUserName' => $value]);
            $sysUser = SysUser::findOne(['sLoginName' => $value]);

            if (($Buyer->lID && $Buyer->lID != $ID) || ($sysUser->lID && $sysUser->lID != $Buyer->SysUserID)) {
                return ['bSuccess' => false, 'sFieldAs' => $field->sFieldAs, 'sMsg' => "该登录名称已存在。"];
            }

        } elseif ($ret['bSuccess'] && $field->sFieldAs == 'sMobile') {
            //编辑渠道商时手机号唯一性判断
            $Buyer = Buyer::findOne(['sMobile' => $value]);

            if ($Buyer->lID && $Buyer->lID != $ID) {
                return ['bSuccess' => false, 'sFieldAs' => $field->sFieldAs, 'sMsg' => "该手机号已存在。"];
            }

        } elseif ($ret['bSuccess'] && $field->sFieldAs == 'sIP') {
            //编辑渠道商时sIP唯一性判断
            $Buyer = Buyer::findOne(['sIP' => $value]);

            if (($Buyer->lID && $Buyer->lID != $ID)) {
                return ['bSuccess' => false, 'sFieldAs' => $field->sFieldAs, 'sMsg' => "该IP已存在。"];
            }
        }

        return $ret;
    }

    public function beforeObjectEditSave($sysObject, $ID, $arrObjectData)
    {

        $buyer = \Yii::$app->buyer->findByID($ID);

        if ($buyer->SysUserID) {
            $sysUser = SysUser::findOne($buyer->SysUserID);
        } else {
            $sysUser = new SysUser();
            $sysUser->ID = NewID::make();
            $sysUser->dNewDate = \Yii::$app->formatter->asDatetime(time());
            $sysUser->bActive = 1;
            $sysUser->SysRoleID = 4;
            $sysUser->SysSolutionID = 'BuyerSolution';
            $sysUser->LanguageID = 'zh-CN';
        }

        $sysUser->sName = $arrObjectData['sName'];
        $sysUser->dEditDate = \Yii::$app->formatter->asDatetime(time());
        $sysUser->sLoginName = $buyer->sUserName;
        $sysUser->sMobile = $buyer->sMobile;
        $sysUser->sPassword = $buyer->sPassword;
        $sysUser->save();

        $arrObjectData['SysUserID'] = $sysUser->lID;

        return parent::beforeObjectNewSave($sysObject, $arrObjectData); // TODO: Change the autogenerated stub
    }

    public function newObjectFieldValidate($field, $value)
    {
        $ret = parent::newObjectFieldValidate($field, $value);
        if ($ret['bSuccess'] && $field->sFieldAs == 'sName') {
            //新增渠道商时名称唯一性判断
            $Buyer = Buyer::findOne(['sName' => $value]);

            if ($Buyer->lID) {
                return ['bSuccess' => false, 'sFieldAs' => $field->sFieldAs, 'sMsg' => "该渠道商名称已存在。"];
            }

        } elseif ($ret['bSuccess'] && $field->sFieldAs == 'sUserName') {
            //新增渠道商时登录名唯一性判断
            $Buyer = Buyer::findOne(['sUserName' => $value]);
            $sysUser = SysUser::findOne(['sLoginName' => $value]);

            if ($Buyer->lID || $sysUser->lID) {
                return ['bSuccess' => false, 'sFieldAs' => $field->sFieldAs, 'sMsg' => "该登录名称已存在。"];
            }

        } elseif ($ret['bSuccess'] && $field->sFieldAs == 'sMobile') {
            //新增渠道商时手机号唯一性判断
            $Buyer = Buyer::findOne(['sMobile' => $value]);

            if ($Buyer->lID) {
                return ['bSuccess' => false, 'sFieldAs' => $field->sFieldAs, 'sMsg' => "该手机号已存在。"];
            }

        } elseif ($ret['bSuccess'] && $field->sFieldAs == 'sIP') {
            //新增渠道商时sIP唯一性判断
            $Buyer = Buyer::findOne(['sIP' => $value]);

            if ($Buyer->lID) {
                return ['bSuccess' => false, 'sFieldAs' => $field->sFieldAs, 'sMsg' => "该IP已存在。"];
            }
        }

        return $ret;
    }

    public function afterObjectNewSave($sysObject, $ID)
    {
        $db = $sysObject->dbconn;
        $buyer = $db->createCommand("SELECT * FROM Buyer WHERE lID='$ID'")->queryOne();

        $sysUser = new SysUser();
        $sysUser->ID = NewID::make();
        $sysUser->sName = $buyer['sName'];
        $sysUser->dNewDate = \Yii::$app->formatter->asDatetime(time());
        $sysUser->dEditDate = \Yii::$app->formatter->asDatetime(time());
        $sysUser->bActive = 1;
        $sysUser->SysRoleID = 4;
        $sysUser->sLoginName = $buyer['sUserName'];
        $sysUser->sPassword = $buyer['sPassword'];
        $sysUser->sMobile = $buyer['sMobile'];
        $sysUser->SysSolutionID = 'BuyerSolution';
        $sysUser->LanguageID = 'zh-CN';
        $sysUser->save();

        $db->createCommand("UPDATE Buyer SET SysUserID='" . $sysUser->lID . "' WHERE lID='$ID'")->execute();

        return parent::afterObjectNewSave($sysObject, $ID); // TODO: Change the autogenerated stub
    }

    public function beforeDel($arrData)
    {
        foreach ($arrData as $data) {
            $Buyer = Buyer::findByID($data['lID']);
            $BuyerOrder = Order::find()->where(['BuyerID' => $data['lID']])->count();
            if ($Buyer->fBalance > 0) {
                throw new \yii\base\UserException("渠道商【" . $data['sName'] . "】渠道款余额不为零，不可删除。");
            } elseif ($BuyerOrder > 0) {
                throw new \yii\base\UserException("渠道商【" . $data['sName'] . "】底下有订单，不可删除。");
            } else {
                SysUser::findOne($Buyer->SysUserID)->delete();
                //删除session
                $session = Session::findOne(['SysUserID' => $Buyer->SysUserID]);
                if($session){
                    $session->delete();
                }
            }
        }
    }
}