<?php

namespace myerm\shop\backend\controllers;

use myerm\backend\common\controllers\ObjectController;
use myerm\shop\backend\models\Product;
use myerm\shop\common\models\HomeSecKill;
use myerm\shop\common\models\ProductSKU;
use myerm\shop\common\models\SecKill;
use myerm\shop\common\models\SecKillLog;
use myerm\shop\common\models\SecKillProduct;
use myerm\shop\common\models\SecKillProductSKU;
use yii\base\Exception;

/**
 * 秒杀
 * ============================================================================
 * 版权所有 2010-2017 三只象（厦门）网络科技有限公司，并保留所有权利。
 * 网站地址: http://www.myerm.cn
 * ----------------------------------------------------------------------------
 * 这不是一个自由软件！您只能在不用于商业目的的前提下对程序代码进行修改和
 * 使用；不允许对程序代码以任何形式任何目的的再发布。
 * ============================================================================
 *
 * @author 陈鹭明 <lumingchen@qq.com>
 * @since 2017年11月27日 09:25:32
 * @version v2.0
 */
class SeckillController extends ObjectController
{
    public function beforeDel($arrData)
    {
        foreach ($arrData as $data) {
            $secKill = SecKill::findOne($data['lID']);

            if (\Yii::$app->formatter->asTimestamp(time()) - \Yii::$app->formatter->asTimestamp($secKill->dStartDate) < 0) {

            } elseif (\Yii::$app->formatter->asTimestamp(time()) - \Yii::$app->formatter->asTimestamp($secKill->dStartDate) > 0
                && \Yii::$app->formatter->asTimestamp(time()) - \Yii::$app->formatter->asTimestamp($secKill->dEndDate) < 0
            ) {
                throw new Exception("您不能删除进行中的秒杀活动");
            } else {

            }
        }

        return parent::beforeDel($arrData);
    }

    public function afterDel($arrData)
    {
        foreach ($arrData as $data) {
            $log = new SecKillLog();
            $log->sName = "删除秒杀活动";
            $log->NewUserID = \Yii::$app->backendsession->SysUserID;
            $log->dNewDate = \Yii::$app->formatter->asDatetime(time());
            $log->SecKillID = $data['lID'];
            $log->TypeID = "del";
            $log->save();

            SecKillProduct::deleteAll(['SecKillID' => $data['lID']]);
            SecKillProductSKU::deleteAll(['SecKillID' => $data['lID']]);
            HomeSecKill::deleteAll(['SecKillID' => $data['lID']]);
        }

        return parent::afterDel($arrData); // TODO: Change the autogenerated stub
    }

    public function listDataConfig($sysList, $arrConfig)
    {
        SecKill::updateStatus();

        foreach ($arrConfig['arrFlt'] as $k => $flt) {
            if ($flt['sField'] == 'ProductID') {
                $arrProduct = Product::find()->select(['lID'])->where([
                    'LIKE',
                    'sName',
                    $flt['sValue']
                ])->indexBy('lID')->all();
                $arrConfig['arrFlt'][] = [
                    'sField' => 'sProductID',
                    'sOper' => 'center',
                    'sValue' => array_keys($arrProduct)
                ];
            }
        }

        return parent::listDataConfig($sysList, $arrConfig); // TODO: Change the autogenerated stub
    }

    public function beforeEdit($ID)
    {
        $secKill = SecKill::findOne($ID);
        if (\Yii::$app->formatter->asTimestamp(\Yii::$app->formatter->asDatetime(time())) - \Yii::$app->formatter->asTimestamp($secKill->dStartDate) < 0) {

        } else {
            //$exception = new UserException("只有未开始的秒杀活动才能编辑。");
            //\Yii::$app->errorHandler->exception = $exception;
            //throw $exception;
        }

        return parent::beforeEdit($ID);
    }


    public function getNewFooterAppend()
    {
        $data = [];
        if ($_GET['ID']) {
            $data['arrSecKillProduct'] = SecKillProduct::findAll(['SecKillID' => $_GET['ID']]);
        }

        return $this->renderPartial("newfooter", $data);
    }

    public function actionSelectspec($ProductID)
    {
        $data = [];

        $data['product'] = \Yii::$app->product->findByID($ProductID);

        $data['arrSku'] = ProductSKU::find()->where(['ProductID'=>$ProductID])->indexBy('sValue')->all();

        return $this->renderPartial("selectspec", $data);
    }

    public function actionSelectdefaultspec($ProductID)
    {
        $product = \Yii::$app->product->findByID($ProductID);

        if (!$product->arrSku) {
            return $this->asJson(['status' => true]);
        }

        return $this->asJson(['status' => false]);
    }

    public function beforeObjectNewSave($sysObject, $arrObjectData)
    {
        $arrObjectData['sProductID'] = ";" . implode(";", array_keys($_POST['seckill'])) . ";";
        return parent::beforeObjectNewSave($sysObject, $arrObjectData); // TODO: Change the autogenerated stub
    }

    public function afterObjectNewSave($sysObject, $ID)
    {
        $db = $sysObject->dbconn;
        $secKill = $db->createCommand("SELECT * FROM SecKill WHERE lID='$ID'")->queryOne();


        foreach (array_keys($_POST['seckill']) as $ProductID) {
            $secKillProduct = new SecKillProduct();
            $secKillProduct->ProductID = $ProductID;
            $secKillProduct->SecKillID = $ID;
            $secKillProduct->dStartDate = $secKill['dStartDate'];
            $secKillProduct->dEndDate = $secKill['dEndDate'];
            $secKillProduct->lNumLimit = $secKill['lNumLimit'];
            $secKillProduct->save();

            foreach ($_POST['seckill'][$ProductID] as $sSKU => $config) {
                $secKillProductSku = new SecKillProductSKU();
                $secKillProductSku->sName = $sSKU;
                $secKillProductSku->SecKillProductID = $secKillProduct->lID;
                $secKillProductSku->SecKillID = $ID;

                if ($sSKU != '默认规格') {
                    $secKillProductSku->ProductSkuID = ProductSKU::findOne([
                        'ProductID' => $ProductID,
                        'sValue' => $sSKU
                    ])->lID;
                }

                $secKillProductSku->fPrice = $config['price'];
                $secKillProductSku->lStock = $config['stock'];
                $secKillProductSku->save();
            }

            $secKillProduct->lStock = SecKillProductSKU::find()->where(['SecKillProductID' => $secKillProduct->lID])->sum("lStock");
            $secKillProduct->fPrice = SecKillProductSKU::find()->where(['SecKillProductID' => $secKillProduct->lID])->min("fPrice");
            $secKillProduct->save();
        }

        $log = new SecKillLog();
        $log->sName = "新建秒杀活动";
        $log->NewUserID = \Yii::$app->backendsession->SysUserID;
        $log->dNewDate = \Yii::$app->formatter->asDatetime(time());
        $log->SecKillID = $ID;
        $log->TypeID = "new";
        $log->save();

        return parent::afterObjectNewSave($sysObject, $ID); // TODO: Change the autogenerated stub
    }

    public function beforeObjectEditSave($sysObject, $ID, $arrObjectData)
    {
        $arrObjectData['sProductID'] = ";" . implode(";", array_keys($_POST['seckill'])) . ";";

        foreach (array_keys($_POST['seckill']) as $ProductID) {

            $secKillProduct = SecKillProduct::find()->where(['SecKillID' => $ID, 'ProductID' => $ProductID])->one();

            if (!$secKillProduct) {
                $secKillProduct = new SecKillProduct();
            }

            $secKillProduct->ProductID = $ProductID;
            $secKillProduct->SecKillID = $ID;
            $secKillProduct->dStartDate = $arrObjectData['dStartDate'];
            $secKillProduct->dEndDate = $arrObjectData['dEndDate'];
            $secKillProduct->lNumLimit = $arrObjectData['lNumLimit'];
            $secKillProduct->save();

            foreach ($_POST['seckill'][$ProductID] as $sSKU => $config) {

                $secKillProductSku = SecKillProductSKU::find()->where([
                    'SecKillProductID' => $secKillProduct->lID,
                    'sName' => $sSKU
                ])->one();
                if (!$secKillProductSku) {
                    $secKillProductSku = new SecKillProductSKU();
                }

                $secKillProductSku->sName = $sSKU;
                $secKillProductSku->SecKillProductID = $secKillProduct->lID;
                $secKillProductSku->SecKillID = $ID;

                if ($sSKU != '默认规格') {
                    $secKillProductSku->ProductSkuID = ProductSKU::findOne([
                        'ProductID' => $ProductID,
                        'sValue' => $sSKU
                    ])->lID;
                }

                $secKillProductSku->fPrice = $config['price'];
                $secKillProductSku->lStock = $config['stock'];
                $secKillProductSku->save();
            }

            $secKillProduct->lStock = SecKillProductSKU::find()->where(['SecKillProductID' => $secKillProduct->lID])->sum("lStock");
            $secKillProduct->fPrice = SecKillProductSKU::find()->where(['SecKillProductID' => $secKillProduct->lID])->min("fPrice");
            $secKillProduct->save();
        }

        $log = new SecKillLog();
        $log->sName = "编辑秒杀活动";
        $log->NewUserID = \Yii::$app->backendsession->SysUserID;
        $log->dNewDate = \Yii::$app->formatter->asDatetime(time());
        $log->SecKillID = $ID;
        $log->TypeID = "edit";
        $log->save();

        return parent::beforeObjectEditSave($sysObject, $ID, $arrObjectData);
    }

    public function actionRemovesku($SkuID)
    {
        SecKillProductSKU::deleteAll(['lID' => $SkuID]);
    }

    public function actionRemoveproduct($ProductID)
    {
        SecKillProduct::deleteAll(['lID' => $ProductID]);
        SecKillProductSKU::deleteAll(['SecKillProductID' => $ProductID]);
    }
}